<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace <#= this.WebApiNamespace #>
{
	using System;
    using System.Net;
    using System.Net.Http;
    using System.Web.Http;
    using System.Web.Http.OData;
    using System.Web.Http.OData.Query;
	using <#= this.ServiceNamespace #>;
	using <#= this.DomainEntityNamespace #>;

	/// <summary>
    /// WebApi controller exposing functionality relating to <#= this.TypeNamePlural #>
    /// </summary>
	public class <#= this.TypeNamePlural #>Controller : ApiController
	{

		/// <summary>
        /// The <#= this.TypeName #> service
        /// </summary>
        private readonly I<#= this.TypeName #>Service <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Service;

        /// <summary>
        /// Initializes a new instance of the <see cref="<#= this.TypeNamePlural #>Controller" /> class.
        /// </summary>
        /// <param name="<#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Service"></param>
        public <#= this.TypeNamePlural #>Controller(I<#= this.TypeName #>Service <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Service)
        {
            this.<#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Service = <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Service;
        }

		/// <summary>
        /// Gets a list of <#= this.TypeNamePlural #>
        /// </summary>
        /// <param name="queryOptions">The OData query options.</param>
        /// <param name="includes">The includes.</param>
        /// <returns>
        /// A list of <#= this.TypeNamePlural #>
        /// </returns>
        /// <remarks>
        /// GET: <#= this.ControllerBaseURL #><#= this.TypeNamePlural.ToLower() #>
        /// </remarks>
        public PageResult<<#= this.TypeName #>> Get(ODataQueryOptions<<#= this.TypeName #>> queryOptions, string includes = "")
        {
            return <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Service.Get<#= this.TypeName #>s(queryOptions, includes);
        }

		/// <summary>
        /// Gets an <#= this.TypeName #> matching the identifier
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <param name="includes">The includes.</param>
        /// <returns>
        /// The matching <#= this.TypeName #>
        /// </returns>
        /// <remarks>
        /// GET: <#= this.ControllerBaseURL #><#= this.TypeNamePlural.ToLower() #>/{id}
        /// </remarks>
        public <#= this.TypeName #> Get(<#= this.IdType #> id, string includes = "")
        {
            return <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Service.Get<#= this.TypeName #>(id, includes);
        }

		/// <summary>
        /// Adds a new <#= this.TypeName #>
        /// </summary>
        /// <param name="<#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>">The <#= this.TypeName #>.</param>
        /// <param name="updateGraph">if set to <c>true</c> any child objects of the entity will also be persisted.</param>
        /// <returns>
        /// A HttpResponseMessage containing the result of the POST
        /// </returns>
        /// <remarks>
        /// POST: <#= this.ControllerBaseURL #><#= this.TypeNamePlural #>
        /// </remarks>
        public HttpResponseMessage Post(<#= this.TypeName #> <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>, bool updateGraph = false)
        {
            <#= this.IdType #> <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Id = this.<#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Service.Insert<#= this.TypeName #>(<#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>, updateGraph);

            // Success, return a uri to the created resource in the response header
            HttpResponseMessage response = new HttpResponseMessage(HttpStatusCode.Created);
            response.Headers.Location = new Uri(this.Request.RequestUri.AbsoluteUri + "/" + <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Id.ToString());

            return response;
        }

		/// <summary>
        /// Updates the specified <#= this.TypeName #>
        /// </summary>
        /// <param name="id">The <#= this.TypeName #> identifier.</param>
        /// <param name="<#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>">The <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>.</param>
        /// <param name="updateGraph">if set to <c>true</c> any child objects of the entity will also be persisted.</param>
        /// <returns>
        /// A HttpResponseMessage containing the result of the PUT
        /// </returns>
        /// <remarks>
        /// PUT: <#= this.ControllerBaseURL #><#= this.TypeNamePlural.ToLower() #>/{id}
        /// </remarks>
        public HttpResponseMessage Put(<#= this.IdType #> id, <#= this.TypeName #> <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>, bool updateGraph = false)
        {
            this.<#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Service.Update<#= this.TypeName #>(id, <#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>, updateGraph);

            // Success
            return new HttpResponseMessage(HttpStatusCode.OK);
        }

		/// <summary>
        /// Deletes the specified identifier.
        /// </summary>
        /// <param name="id">The identifier.</param>
        /// <returns>A HttpResponseMessage containing the result of the DELETE</returns>
        /// <remarks>
        /// DELETE: <#= this.ControllerBaseURL #><#= this.TypeNamePlural.ToLower() #>/{id}
        /// </remarks>
        public HttpResponseMessage Delete(<#= this.IdType #> id)
        {
            this.<#= this.TypeName[0].ToString().ToLower() + this.TypeName.Substring(1) #>Service.Delete<#= this.TypeName #>(id);

            // Success
            return new HttpResponseMessage(HttpStatusCode.OK);
        }
		
	}
}
<#+
	string ControllerBaseURL = "api/";
	string WebApiNamespace = "EventSauce.Web.Controllers";
	string ServiceNamespace = "EventSauce.Core.Services";
	string DomainEntityNamespace = "EventSauce.Domain";
	string RepositoryNamespace = "EventSauce.Core.Repositories";
	string TypeName = "AccountUser";
	string TypeNamePlural = "AccountUsers";
	string IdType = "string";
#>